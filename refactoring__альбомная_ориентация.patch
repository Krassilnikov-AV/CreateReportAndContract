Index: .idea/artifacts/CreateReportAndContract_war_exploded.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/artifacts/CreateReportAndContract_war_exploded.xml	(revision d939ab571f79f530e8a98af25cc49ce70de3501f)
+++ .idea/artifacts/CreateReportAndContract_war_exploded.xml	(date 1612809242765)
@@ -24,6 +24,7 @@
           <element id="library" level="project" name="Maven: org.apache.xmlbeans:xmlbeans:2.6.0" />
           <element id="library" level="project" name="Maven: stax:stax-api:1.0.1" />
           <element id="library" level="project" name="Maven: org.postgresql:postgresql:42.2.5" />
+          <element id="library" level="project" name="Maven: org.apache.poi:ooxml-schemas:1.4" />
         </element>
       </element>
       <element id="directory" name="META-INF">
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision d939ab571f79f530e8a98af25cc49ce70de3501f)
+++ pom.xml	(date 1612809164776)
@@ -73,6 +73,12 @@
 		<artifactId>poi-ooxml-schemas</artifactId>
 		<version>3.11</version>
 	</dependency>
+<!--org.apache.poi ooxml-schemas 1.4 альбомная ориентация-->
+	<!--<dependency>-->
+		<!--<groupId>org.apache.poi</groupId>-->
+		<!--<artifactId>poi-ooxml-schemas</artifactId>-->
+		<!--<version>1.4</version>-->
+	<!--</dependency>-->
 
 	<dependency>
 		<groupId>org.apache.xmlbeans</groupId>
@@ -85,6 +91,11 @@
 		<artifactId>postgresql</artifactId>
 		<version>42.2.5</version>
 	</dependency>
+	<dependency>
+		<groupId>org.apache.poi</groupId>
+		<artifactId>ooxml-schemas</artifactId>
+		<version>1.4</version>
+	</dependency>
 
 	<!--
 		<dependency>
Index: src/main/java/query/SQLQueryDate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/query/SQLQueryDate.java	(revision d939ab571f79f530e8a98af25cc49ce70de3501f)
+++ src/main/java/query/SQLQueryDate.java	(date 1612805815529)
@@ -237,6 +237,50 @@
 		return (LinkedList<String>) code;
 	}
 
+	public LinkedList<String> searchToAuditorium(String search) throws SQLException {
+		ConnectionApp con = new ConnectionApp();
+		List<String> pro = new LinkedList<>();
+		List<String> audit = new LinkedList<>();
+
+		try (Connection connection = con.getPostConnection()) {
+			String SQL = "SELECT * FROM schedule";
+			try (Statement statement =
+					 connection.createStatement(
+						 ResultSet.TYPE_SCROLL_INSENSITIVE,
+						 ResultSet.CONCUR_READ_ONLY)) {
+
+				ResultSet resultSet = statement.executeQuery(SQL);
+				String program;
+				String aud;
+				int row;
+				while (resultSet.next()) {
+					program = resultSet.getString(1);
+					aud = resultSet.getString(7);
+//	!!! доработать поиск, чтоб учитывал слово в скобках
+					// поиск слова в получаемом списке
+					Set<String> words = new HashSet<>(
+						Arrays.asList(program.split(" "))
+					);
+// если данное слово содержится в столбце БД добавляем учителя в список
+					if (words.contains(search)) {
+						row = resultSet.getRow();
+						resultSet.absolute(row);    // перемещение курсора к заданному номеру строки
+						((LinkedList<String>) audit).addLast(aud);  // добвляет указанный элемент в конец этого списка
+//						System.out.println("индекс: " +
+//							row + ": " + " аудитория: " +
+//							((LinkedList<String>) audit).pop());
+					}
+				}
+				System.out.println("Запрошенные данные по аудиториям успешно выбраны!");
+			} catch (SQLException e) {
+				e.printStackTrace();
+			}
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		return (LinkedList<String>) audit;
+	}
+
 	public LinkedList<String> searchToTeacher(String search) throws SQLException {
 		ConnectionApp con = new ConnectionApp();
 		List<String> pro = new LinkedList<>();
@@ -289,7 +333,8 @@
 		SQLQueryDate sql = new SQLQueryDate();
 //		sql.searchToProgram("Java");
 //		sql.searchToTeacher("Java");
-		sql.searchToCodegroup("Java");
+//		sql.searchToCodegroup("Java");
+		sql.searchToAuditorium("Java");
 //		sql.view();
 //		sql.prog();
 //		sql.deletedDataSQLloc();
Index: src/main/java/createDocument/CreateScheduleReport.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/createDocument/CreateScheduleReport.java	(revision d939ab571f79f530e8a98af25cc49ce70de3501f)
+++ src/main/java/createDocument/CreateScheduleReport.java	(date 1612809243020)
@@ -36,7 +36,8 @@
 import query.SQLQueryDate;
 
 import java.io.*;
-import java.util.*;
+import java.math.BigInteger;
+import java.util.LinkedList;
 
 /**
  * Класс WriteWordRaspisanie
@@ -53,16 +54,31 @@
 				 = new FileOutputStream("D:\\REPOSITORIES-2\\WordTest.docx")) {
 			// создаем модель docx документа,
 			// к которой будем прикручивать наполнение (колонтитулы, текст)
-			XWPFDocument docxModel = new XWPFDocument();
-			CTSectPr ctSectPr = docxModel.getDocument().getBody().addNewSectPr();
-			// получаем экземпляр XWPFHeaderFooterPolicy для работы с колонтитулами
-			XWPFHeaderFooterPolicy headerFooterPolicy = new XWPFHeaderFooterPolicy(docxModel, ctSectPr);
+			XWPFDocument document = new XWPFDocument();
+//			CTSectPr ctSectPr = document.getDocument().getBody().addNewSectPr();
+
+			CTDocument1 doc = document.getDocument();
+			CTBody body=doc.getBody();
+			if (!body.isSetSectPr()) {
+				body.addNewSectPr();
+			}
+			CTSectPr ctSectPr = body.getSectPr();
+
+			if(!ctSectPr.isSetPgSz()) {
+				ctSectPr.addNewPgSz();
+			}
+			CTPageSz pageSize = ctSectPr.getPgSz();
+			pageSize.setW(BigInteger.valueOf(15840));
+			pageSize.setH(BigInteger.valueOf(12240));
+			pageSize.setOrient(STPageOrientation.LANDSCAPE);
+// получаем экземпляр XWPFHeaderFooterPolicy для работы с колонтитулами
+			XWPFHeaderFooterPolicy headerFooterPolicy = new XWPFHeaderFooterPolicy(document, ctSectPr);
 
 			// создаем верхний колонтитул Word файла
 			CTP ctpHeaderModel = createHeaderModel("УТВЕРЖДАЮ");
 			// устанавливаем сформированный верхний
 			// колонтитул в модель документа Word
-			XWPFParagraph headerParagraph = new XWPFParagraph(ctpHeaderModel, docxModel);
+			XWPFParagraph headerParagraph = new XWPFParagraph(ctpHeaderModel, document);
 			headerFooterPolicy.createHeader(XWPFHeaderFooterPolicy.DEFAULT,
 				new XWPFParagraph[]{headerParagraph});
 
@@ -70,12 +86,12 @@
 			CTP ctpFooterModel = createFooterModel("Просто нижний колонтитул");
 			// устанавливаем сформированый нижний
 			// колонтитул в модель документа Word
-			XWPFParagraph footerParagraph = new XWPFParagraph(ctpFooterModel, docxModel);
+			XWPFParagraph footerParagraph = new XWPFParagraph(ctpFooterModel, document);
 			headerFooterPolicy.createFooter(XWPFHeaderFooterPolicy.DEFAULT, new XWPFParagraph[]{footerParagraph});
 
 			// создаем обычный параграф, который будет расположен слева,
 			// будет синим курсивом со шрифтом 14 размера
-			XWPFParagraph bodyParagraph = docxModel.createParagraph();
+			XWPFParagraph bodyParagraph = document.createParagraph();
 			bodyParagraph.setAlignment(ParagraphAlignment.LEFT);
 			XWPFRun paragraphConfig = bodyParagraph.createRun();
 			paragraphConfig.setItalic(true);
@@ -86,23 +102,29 @@
 
 			LinkedList<String> listProg;
 			LinkedList<String> listCodeGroup;
+			LinkedList<String> listAuditorium;
 			LinkedList<String> listTeach;
 
+			String search = "Java"; // слово для поиска
 			SQLQueryDate sqlQueryDate = new SQLQueryDate();
-			listProg = sqlQueryDate.searchToProgram("Java");
-			listTeach = sqlQueryDate.searchToTeacher("Java");
-			listCodeGroup = sqlQueryDate.searchToCodegroup("Java");
+			listProg = sqlQueryDate.searchToProgram(search);
+			listTeach = sqlQueryDate.searchToTeacher(search);
+			listCodeGroup = sqlQueryDate.searchToCodegroup(search);
+			listAuditorium = sqlQueryDate.searchToAuditorium(search);
 
 			int sizeListProg = listProg.size();  // определяет размер списка вставляемых значений (количество строк)
 
-			XWPFTable table = docxModel.createTable(sizeListProg, 3);
+			XWPFTable table = document.createTable(sizeListProg, 4);
 			for (int i = 0; i < sizeListProg; i++) {
 				table.getRow(i).getCell(0).setText(listProg.get(i));
 				if(table.getRow(i).getCell(1).getText().isEmpty()) {
 					table.getRow(i).getCell(1).setText(listCodeGroup.get(i));
 				}
 				if (table.getRow(i).getCell(2).getText().isEmpty()) {
-						table.getRow(i).getCell(2).setText(listTeach.get(i));
+					table.getRow(i).getCell(2).setText(listAuditorium.get(i));
+				}
+				if (table.getRow(i).getCell(3).getText().isEmpty()) {
+						table.getRow(i).getCell(3).setText(listTeach.get(i));
 				}
 			}
 //			table.addNewCol();
@@ -111,7 +133,7 @@
 //			}
 			// сохраняем шаблон docx документа в файл
 
-			docxModel.write(outputStream);
+			document.write(outputStream);
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
@@ -136,7 +158,7 @@
 		cttFooter.setStringValue(footerContent);
 		return ctpFooterModel;
 	}
-
+//CTPageSz
 	private static CTP createHeaderModel(String headerContent) {
 		// создаем хедер или верхний колонтитул
 		CTP ctpHeaderModel = CTP.Factory.newInstance();
@@ -146,5 +168,4 @@
 		cttHeader.setStringValue(headerContent);
 		return ctpHeaderModel;
 	}
-
 }
\ No newline at end of file
